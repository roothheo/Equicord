#!/usr/bin/env python3
"""
Script pour v√©rifier les mises √† jour d'Equicord sans toucher aux plugins modifi√©s
Utilise l'API GitHub pour comparer les versions et commits
"""

import json
import requests
import subprocess
import sys
import os
from datetime import datetime
from packaging import version
import argparse
import shutil

class EquicordUpdater:
    def __init__(self, project_path="/home/bash/Desktop/dev/bashcord"):
        self.project_path = project_path
        self.upstream_repo = "Equicord/Equicord"
        self.protected_dirs = [
            "src/equicordplugins",
            "src/userplugins"
        ]
        
    def get_current_version(self):
        """R√©cup√®re la version actuelle depuis package.json"""
        try:
            with open(os.path.join(self.project_path, "package.json"), 'r') as f:
                package_data = json.load(f)
                return package_data.get("version", "unknown")
        except Exception as e:
            print(f"‚ùå Erreur lors de la lecture du package.json: {e}")
            return None
    
    def get_current_commit(self):
        """R√©cup√®re le commit actuel"""
        try:
            result = subprocess.run(
                ["git", "rev-parse", "HEAD"],
                cwd=self.project_path,
                capture_output=True,
                text=True,
                check=True
            )
            return result.stdout.strip()
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur Git: {e}")
            return None
    
    def get_upstream_info(self):
        """R√©cup√®re les infos de la derni√®re release du d√©p√¥t upstream"""
        try:
            # API GitHub pour la derni√®re release
            url = f"https://api.github.com/repos/{self.upstream_repo}/releases/latest"
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            release_data = response.json()
            
            # API pour obtenir le commit principal
            commits_url = f"https://api.github.com/repos/{self.upstream_repo}/commits/main"
            commits_response = requests.get(commits_url, timeout=10)
            commits_response.raise_for_status()
            
            latest_commit = commits_response.json()
            
            return {
                "version": release_data.get("tag_name", "").lstrip('v'),
                "commit": latest_commit["sha"],
                "commit_date": latest_commit["commit"]["committer"]["date"],
                "commit_message": latest_commit["commit"]["message"],
                "release_url": release_data.get("html_url", ""),
                "release_notes": release_data.get("body", "")
            }
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des infos upstream: {e}")
            return None
    
    def check_git_status(self):
        """V√©rifie l'√©tat des fichiers modifi√©s localement"""
        try:
            result = subprocess.run(
                ["git", "status", "--porcelain"],
                cwd=self.project_path,
                capture_output=True,
                text=True,
                check=True
            )
            
            modified_files = result.stdout.strip().split('\n') if result.stdout.strip() else []
            protected_files = []
            other_files = []
            
            for file_line in modified_files:
                if len(file_line) < 3:
                    continue
                    
                file_path = file_line[3:]  # Enlever les 3 premiers caract√®res (status + espace)
                
                # V√©rifier si le fichier est dans un dossier prot√©g√©
                is_protected = any(file_path.startswith(protected_dir) for protected_dir in self.protected_dirs)
                
                if is_protected:
                    protected_files.append(file_path)
                else:
                    other_files.append(file_path)
            
            return {
                "protected_files": protected_files,
                "other_files": other_files,
                "total_modified": len(modified_files)
            }
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de la v√©rification du statut Git: {e}")
            return None
    
    def get_commits_behind(self):
        """V√©rifie combien de commits on est en retard sur upstream"""
        try:
            # R√©cup√©rer les infos d'upstream
            subprocess.run(
                ["git", "fetch", "upstream"],
                cwd=self.project_path,
                capture_output=True,
                check=True
            )
            
            # Compter les commits en retard
            result = subprocess.run(
                ["git", "rev-list", "--count", "HEAD..upstream/main"],
                cwd=self.project_path,
                capture_output=True,
                text=True,
                check=True
            )
            
            return int(result.stdout.strip())
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de la v√©rification des commits: {e}")
            return None
    
    def show_update_summary(self):
        """Affiche un r√©sum√© des mises √† jour disponibles"""
        print("üîç V√©rification des mises √† jour d'Equicord...")
        print("=" * 60)
        
        # Version actuelle
        current_version = self.get_current_version()
        current_commit = self.get_current_commit()
        
        print(f"üì¶ Version actuelle: {current_version}")
        print(f"üìù Commit actuel: {current_commit[:8] if current_commit else 'unknown'}")
        
        # Infos upstream
        upstream_info = self.get_upstream_info()
        if not upstream_info:
            return False
        
        print(f"üåê Derni√®re version upstream: {upstream_info['version']}")
        print(f"üìù Dernier commit upstream: {upstream_info['commit'][:8]}")
        
        # Comparaison des versions
        try:
            if version.parse(current_version) < version.parse(upstream_info['version']):
                print("üÜï ‚úÖ Nouvelle version disponible!")
            elif version.parse(current_version) == version.parse(upstream_info['version']):
                print("‚úÖ Vous √™tes √† jour (version)")
            else:
                print("üîÑ Votre version est plus r√©cente que la release officielle")
        except Exception:
            print("‚ö†Ô∏è  Impossible de comparer les versions")
        
        # V√©rifier les commits
        commits_behind = self.get_commits_behind()
        if commits_behind is not None:
            if commits_behind > 0:
                print(f"üìà Vous √™tes {commits_behind} commit(s) en retard")
            else:
                print("‚úÖ Vous √™tes √† jour (commits)")
        
        print("\n" + "=" * 60)
        
        # V√©rifier les fichiers modifi√©s
        git_status = self.check_git_status()
        if git_status:
            if git_status["protected_files"]:
                print(f"üîí Plugins prot√©g√©s modifi√©s ({len(git_status['protected_files'])}):")
                for file in git_status["protected_files"][:5]:  # Afficher max 5
                    print(f"   - {file}")
                if len(git_status["protected_files"]) > 5:
                    print(f"   ... et {len(git_status['protected_files']) - 5} autres")
            
            if git_status["other_files"]:
                print(f"‚ö†Ô∏è  Autres fichiers modifi√©s ({len(git_status['other_files'])}):")
                for file in git_status["other_files"][:5]:  # Afficher max 5
                    print(f"   - {file}")
                if len(git_status["other_files"]) > 5:
                    print(f"   ... et {len(git_status['other_files']) - 5} autres")
        
        # Afficher les notes de release si disponibles
        if upstream_info.get("release_notes") and len(upstream_info["release_notes"]) > 10:
            print(f"\nüìã Notes de la derni√®re release:")
            print("-" * 40)
            # Limiter les notes √† 500 caract√®res
            notes = upstream_info["release_notes"]
            if len(notes) > 500:
                notes = notes[:500] + "..."
            print(notes)
            print(f"\nüîó Lien: {upstream_info['release_url']}")
        
        return True
    
    def safe_update(self, dry_run=True):
        """Effectue une mise √† jour s√©curis√©e sans toucher aux plugins"""
        if dry_run:
            print("\nüß™ SIMULATION - Aucune modification ne sera effectu√©e")
        
        print("\nüîÑ Pr√©paration de la mise √† jour s√©curis√©e...")
        
        # V√©rifier l'√©tat
        git_status = self.check_git_status()
        if not git_status:
            return False
        
        # Sauvegarder les plugins modifi√©s
        if git_status["protected_files"]:
            print("üíæ Sauvegarde des plugins modifi√©s...")
            if not dry_run:
                # Cr√©er un stash avec seulement les fichiers prot√©g√©s
                for file in git_status["protected_files"]:
                    try:
                        subprocess.run(
                            ["git", "add", file],
                            cwd=self.project_path,
                            check=True
                        )
                    except subprocess.CalledProcessError:
                        pass
                
                subprocess.run(
                    ["git", "stash", "push", "-m", f"Plugins sauvegard√©s - {datetime.now().strftime('%Y-%m-%d %H:%M')}"],
                    cwd=self.project_path,
                    check=True
                )
        
        # Merger depuis upstream
        print("üîÑ Mise √† jour depuis upstream...")
        if not dry_run:
            try:
                subprocess.run(
                    ["git", "fetch", "upstream"],
                    cwd=self.project_path,
                    check=True
                )
                
                subprocess.run(
                    ["git", "merge", "upstream/main"],
                    cwd=self.project_path,
                    check=True
                )
            except subprocess.CalledProcessError as e:
                print(f"‚ùå Erreur lors du merge: {e}")
                return False
        
        # Restaurer les plugins
        if git_status["protected_files"] and not dry_run:
            print("‚ôªÔ∏è  Restauration des plugins...")
            try:
                subprocess.run(
                    ["git", "stash", "pop"],
                    cwd=self.project_path,
                    check=True
                )
            except subprocess.CalledProcessError:
                print("‚ö†Ô∏è  Conflit lors de la restauration - r√©solution manuelle n√©cessaire")
        
        if dry_run:
            print("‚úÖ Simulation termin√©e - la mise √† jour semble s√ªre")
        else:
            print("‚úÖ Mise √† jour termin√©e!")
            print("üí° N'oubliez pas de faire: pnpm install && pnpm build")
        
        return True

def check_and_install_dependencies(project_path):
    """
    V√©rifie et installe git, node.js et pnpm si besoin, puis ex√©cute pnpm install, build et inject.
    """
    import platform
    import time
    
    def is_installed(cmd):
        return shutil.which(cmd) is not None

    # V√©rification de git
    if not is_installed("git"):
        print("‚ùå git n'est pas install√© !")
        if platform.system() == "Linux":
            print("‚û°Ô∏è  Installation de git (sudo requis)...")
            subprocess.run(["sudo", "apt", "update"])  # Pour Debian/Ubuntu
            subprocess.run(["sudo", "apt", "install", "-y", "git"])
        elif platform.system() == "Darwin":
            print("‚û°Ô∏è  Installation de git via Homebrew...")
            subprocess.run(["brew", "install", "git"])
        else:
            print("Veuillez installer git manuellement : https://git-scm.com/download/win")
            return False
    else:
        print("‚úÖ git est install√©")

    # V√©rification de node
    if not is_installed("node"):
        print("‚ùå node.js n'est pas install√© !")
        if platform.system() == "Linux":
            print("‚û°Ô∏è  Installation de node.js (sudo requis)...")
            subprocess.run(["sudo", "apt", "update"])
            subprocess.run(["sudo", "apt", "install", "-y", "nodejs", "npm"])
        elif platform.system() == "Darwin":
            print("‚û°Ô∏è  Installation de node via Homebrew...")
            subprocess.run(["brew", "install", "node"])
        else:
            print("Veuillez installer Node.js manuellement : https://nodejs.org/en/download/")
            return False
    else:
        print("‚úÖ node.js est install√©")

    # V√©rification de pnpm
    if not is_installed("pnpm"):
        print("‚û°Ô∏è  Installation de pnpm...")
        subprocess.run(["npm", "install", "-g", "pnpm"])
    else:
        print("‚úÖ pnpm est install√©")

    # Installation des d√©pendances Node.js
    print("\nüì¶ Installation des d√©pendances Node.js (pnpm install)...")
    subprocess.run(["pnpm", "install", "--no-frozen-lockfile"], cwd=project_path, check=True)

    # Build
    print("\nüî® Build d'Equicord (pnpm build)...")
    subprocess.run(["pnpm", "build"], cwd=project_path, check=True)

    # Injection
    print("\nüöÄ Injection d'Equicord dans Discord (pnpm inject)...")
    subprocess.run(["pnpm", "inject"], cwd=project_path, check=True)

    print("\n‚úÖ Installation compl√®te !")
    return True

def main():
    # Chemin du projet (dossier parent du script install)
    project_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    print(f"üìÅ Dossier du projet : {project_path}")

    # 1. V√©rifier et installer les d√©pendances + build + inject
    check_and_install_dependencies(project_path)

    # 2. Mettre √† jour le d√©p√¥t (pull depuis upstream si possible)
    updater = EquicordUpdater(project_path)
    print("\nüîÑ Mise √† jour du d√©p√¥t depuis upstream (si possible)...")
    try:
        subprocess.run(["git", "fetch", "upstream"], cwd=project_path, check=True)
        subprocess.run(["git", "merge", "upstream/main"], cwd=project_path, check=True)
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de merger upstream automatiquement : {e}")

    # 3. Afficher un r√©sum√© de l'√©tat
    updater.show_update_summary()

if __name__ == "__main__":
    main() 